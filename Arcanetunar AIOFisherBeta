package arcantunar.fisherbeta;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

import org.powerbot.core.event.listeners.PaintListener;
import org.powerbot.core.script.ActiveScript;
import org.powerbot.core.script.job.Job;
import org.powerbot.core.script.job.Task;
import org.powerbot.core.script.job.state.Node;
import org.powerbot.core.script.job.state.Tree;
import org.powerbot.game.api.Manifest;
import org.powerbot.game.api.methods.Widgets;
import org.powerbot.game.api.methods.input.Keyboard;
import org.powerbot.game.api.methods.input.Mouse;
import org.powerbot.game.api.methods.interactive.NPCs;
import org.powerbot.game.api.methods.interactive.Players;
import org.powerbot.game.api.methods.tab.Inventory;
import org.powerbot.game.api.methods.tab.Skills;
import org.powerbot.game.api.methods.widget.Camera;
import org.powerbot.game.api.util.Random;
import org.powerbot.game.api.wrappers.interactive.NPC;
import org.powerbot.game.api.util.Timer;



@Manifest(authors = { "arcanetunar" }, description = "Fishing script the beta", name = "AT AIOFisherBeta")
public class AIOFisherBeta extends ActiveScript implements PaintListener{
  
	String act;
	public int[] allfishes = {331, 335, 317, 321, 327, 345, 349, 377}; 
	public int spots;
	
	 private Timer timer = new Timer(0);
	 public int startexp;
	
	private final Color color1 = new Color(0,0,139, 50);
	private final Color color2 = new Color(0, 0, 0);
	private final Color color3 = new Color(250, 10, 10);
	private final Color color4 = new Color(183, 57, 57);
	private final Color color5 = new Color(69, 13, 207);
	private final Color color6 = new Color(244, 242, 249);
	private final BasicStroke stroke1 = new BasicStroke(1);
	private final Font font1 = new Font("Century Gothic", 0, 25);
	private final Font font2 = new Font("Century Gothic", 0, 20);

	public synchronized final void provide(final Node... jobs){ 
		for (final Node job : jobs){
			if (!jobsCollection.contains(job)){
				jobsCollection.add(job);
			}
		}
		jobContainer = new Tree(jobsCollection.toArray(new Node[jobsCollection.size()]));
	}
	public synchronized final void revoke(final Node... jobs) { 
		for (final Node job : jobs) {
			if (jobsCollection.contains(job)){
				jobsCollection.remove(job);
			}
		}
		jobContainer = new Tree(jobsCollection.toArray(new Node[jobsCollection.size()]));
	}
	public final void submit(final Job... jobs){
		for (final Job job : jobs){
			getContainer().submit(job);
		}
	}
	
	public void onStart() {
		startexp = Skills.getExperience(Skills.FISHING);
		EventQueue.invokeLater(new Runnable() {

			@Override
			public void run() {
				try {
					new GUI();
				}catch (Exception e) {
					e.printStackTrace();
				}

			}

		});
	}
	
	private final List<Node> jobsCollection = Collections.synchronizedList(new ArrayList<Node>());
	private Tree jobContainer = null;
		
		@Override
		public int loop() {
			if (jobContainer !=null) {
				final Node job = jobContainer.state();
				if (job !=null){
					jobContainer.set(job);
					getContainer().submit(job);
					job.join();
				}
			}
			return Random.nextInt(10, 50);
		}
	public class fisher extends Node {

		@Override
		public boolean activate() {
			return Players.getLocal().isIdle() && !Inventory.isFull();
		}

		@Override
		public void execute() {
			NPC s = NPCs.getNearest(spots);
			if(s !=null){
				if(Players.getLocal().isIdle()){
					if(s.isOnScreen()){
						s.interact(act);
						Task.sleep(Random.nextInt(1500, 2500));
					}else if(!s.isOnScreen()){
						Camera.turnTo(s);
					}
				}
			}
		}
	}
	
	public class actionb extends Node {

		@Override
		public boolean activate() {
			return Widgets.get(640, 3).visible();
		}

		@Override
		public void execute() {
			if (Widgets.get(640, 3).visible()) {
				Widgets.get(640, 3).interact("expand");
			}


		}
	}
	
	public class dropper extends Node {

		@Override
		public boolean activate() {
			return Inventory.getCount(allfishes) > 20;
		}

		@Override
		public void execute() {
			Keyboard.sendKey('1');
			Keyboard.sendKey('2');
			Keyboard.sendKey('3');
			Keyboard.sendKey('4');
			Keyboard.sendKey('5');
			Keyboard.sendKey('6');
			Keyboard.sendKey('7');
			Keyboard.sendKey('8');
			Keyboard.sendKey('9');
			Keyboard.sendKey('0');
			Keyboard.sendKey(')');
			Keyboard.sendKey('-');
		}
	}
	
	public class GUI extends JFrame {

 
     	private static final long serialVersionUID = 1L;

     	GridLayout grid;
     	Container pane;

     	JLabel label1 = new JLabel("AIOFisher by ArcaneTunar");
     	JComboBox<String> comboType = new JComboBox<String>();
     	JButton btnStart = new JButton("Start");

     	GUI() {

     		pane = getContentPane();
     		grid = new GridLayout(3, 0);

     		grid.setVgap(20);

     		this.setLayout(grid);
     		this.setSize(250, 150);
     		this.setResizable(false);
     		this.setAlwaysOnTop(true);
     		this.setVisible(true);
     		this.setLocationRelativeTo(null);

     		label1.setHorizontalAlignment(JLabel.CENTER);
     		pane.add(label1);

     		comboType.setModel(new DefaultComboBoxModel<>(new String[] {
     				"Schrims/Anchovis(Drop)",
     				"Sardines/Herring (Drop)", 
     				"Pike (Lumbridge & Drop)",
     				"Trout/Salmon (Lumbridge & Drop)",
     				"Pike(Barb Village & Drop)",
     				"Trout/Salmon (Barb Village & Drop)",
     				"Leaping Fishes(Drop)"}));
     		pane.add(comboType);

     		btnStart.addActionListener(new ActionListener() {

     			@Override
     			public void actionPerformed(ActionEvent e) {
     				startScript();

     			}

     		});
     		pane.add(btnStart);

     	}

     	public void startScript() {
     		switch(comboType.getSelectedIndex()) {
     		case 0 :
     			spots = 327;
     			act = "Net";
     			jobContainer = new Tree(new Node[]{new fisher(), new dropper(), new actionb()});
     			break;
     		case 2 : 
     			spots = 327;
     			act = "Bait";
     			jobContainer = new Tree(new Node[]{new fisher(), new dropper(), new actionb()});
     			break;
     		case 4:
     			spots = 329;
     			act = "Bait";
     			jobContainer = new Tree(new Node[]{new fisher(), new dropper(), new actionb()});
     			break;
     		case 5:
     			spots = 329;
     			act = "Lure";
     			jobContainer = new Tree(new Node[]{new fisher(), new dropper(), new actionb()});
     			break;
     		case 6:
     			spots = 328;
     			act = "Bait";
     			jobContainer = new Tree(new Node[]{new fisher(), new dropper(), new actionb()});
     			break;
     		case 7: 
     			spots = 328;
     			act = "Lure";
     			jobContainer = new Tree(new Node[]{new fisher(), new dropper(), new actionb()});
     			break;
     		case 8:
     			spots = 2722;
     			act = "Use-rod";
     			jobContainer = new Tree(new Node[]{new fisher(), new dropper(), new actionb()});
     			break;
     		}
     		this.dispose();
     	}
     }

    public void onRepaint(Graphics g1) {
        Graphics2D g = (Graphics2D)g1;
        int feg = Skills.getExperience(Skills.FISHING) - startexp;
        g.setColor(color1);
        g.fillRect(545, 254, 194, 261);
        g.setColor(color2);
        g.setStroke(stroke1);
        g.drawRect(545, 254, 194, 261);
        g.setFont(font1);
        g.setColor(color3);
        g.drawString("ArcaneTunar", 563, 283 );
        g.setColor(color4);
        g.drawString("AIOFisher", 587, 303 );
        g.setFont(font2);
        g.setColor(color5);
        g.drawString("BETA", 668, 324);
        g.setColor(color6);
        g.drawString("Time: " +timer.toElapsedString(), 560, 350);
        g.drawString("Exp Gained: "+feg, 560, 390);
        drawMouse(g1);
    }
 public void drawMouse(Graphics g) {
     g.setColor(Color.RED);
     int mouseY = (int) Mouse.getLocation().getY();
     int mouseX = (int) Mouse.getLocation().getX();
     g.drawLine(mouseX - 5, mouseY + 5, mouseX + 5, mouseY - 5);
     }
}

